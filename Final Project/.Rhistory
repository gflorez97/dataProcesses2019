yelp_key <- "-RQmiAwjGayf8-fpXOGWpZX00FdFXtV3Dz5gcecN5_wnFBihR9ddSg4vAjKguf04WriFS-MkC4Sjbq4A62kyynsejPs5WaizVv8TeYtNESl2TsGdRdGJ42WWjgSuXXYx"
uri <- "https://api.yelp.com/v3/businesses/search"
query_params <- list(
term = "restaurant",
categories = "pizza",
location = "Madrid",
sort_by = "rating",
radius = 1000 # measured in meters, as detailed in the documentation
)
# Make a GET request, including your API key as a header
response <- GET(
uri,
query = query_params,
add_headers(Authorization = paste("bearer", yelp_key))
)
# Parse results and isolate data of interest
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
# Inspect the response data
names(response_data) # [1] "businesses" "total" "region"
View(response_data$business)
View(response_data$total)
View(response_data$region)
# Inspect the response data
names(response_data) # [1] "businesses" "total" "region"
View(response_data$region)
View(response_data$businesses)
query_params <- list(
term = "restaurant",
categories = "Pizza",
location = "Madrid",
sort_by = "rating",
radius = 1000 # measured in meters, as detailed in the documentation
)
# Make a GET request, including your API key as a header
response <- GET(
uri,
query = query_params,
add_headers(Authorization = paste("bearer", yelp_key))
)
# Parse results and isolate data of interest
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
# Inspect the response data
names(response_data) # [1] "businesses" "total" "region"
View(response_data$businesses)
query_params <- list(
term = "restaurant",
categories = "pizza",
location = "Madrid",
sort_by = "rating",
radius = 1000 # measured in meters, as detailed in the documentation
)
# Make a GET request, including your API key as a header
response <- GET(
uri,
query = query_params,
add_headers(Authorization = paste("bearer", yelp_key))
)
# Parse results and isolate data of interest
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
# Inspect the response data
names(response_data) # [1] "businesses" "total" "region"
View(response_data$businesses)
query_params <- list(
term = "Pizza restaurant",
location = "Madrid",
sort_by = "rating",
radius = 1000 # measured in meters, as detailed in the documentation
)
# Make a GET request, including your API key as a header
response <- GET(
uri,
query = query_params,
add_headers(Authorization = paste("bearer", yelp_key))
)
# Parse results and isolate data of interest
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
# Inspect the response data
names(response_data) # [1] "businesses" "total" "region"
View(response_data$businesses)
yelp_key <- "-RQmiAwjGayf8-fpXOGWpZX00FdFXtV3Dz5gcecN5_wnFBihR9ddSg4vAjKguf04WriFS-MkC4Sjbq4A62kyynsejPs5WaizVv8TeYtNESl2TsGdRdGJ42WWjgSuXXYx"
uri <- "https://api.yelp.com/v3/businesses/search"
query_params <- list(
term = "Pizza restaurant",
location = "Madrid",
sort_by = "rating",
radius = 1000 # measured in meters, as detailed in the documentation
)
# Make a GET request, including your API key as a header
response <- GET(
uri,
query = query_params,
add_headers(Authorization = paste("bearer", yelp_key))
)
View(response)
# Parse results and isolate data of interest
response_text <- content(response, type = "text")
response_text
# Inspect the response data
names(response_data) # [1] "businesses" "total" "region"
response_data <- fromJSON(response_text)
# Inspect the response data
names(response_data) # [1] "businesses" "total" "region"
View(response_data$businesses)
library(Lahman)
library(tidyverse)
library(ggplot2)
## Prelude: Extract information from Salaries and People
## to be merged with the batting data.
data(Batting)
## Prelude: Extract information from Salaries and People
## to be merged with the batting data.
data(Batting)
force(Batting)
View(Batting)
View(Batting)
battingIndividual <- batting %>%
group_by(playerID)
battingIndividual <- Batting %>%
group_by(playerID)
View(battingIndividual)
battingIndividual <- Batting %>%
group_by(playerID) %>%
summarise(meanHr = mean(HR))
View(battingIndividual)
battingIndividual <- Batting %>%
group_by(playerID) %>%
summarise()
View(battingIndividual)
battingIndividual <- Batting %>%
group_by(playerID) %>%
View(battingIndividual)
battingIndividual <- Batting %>%
group_by(playerID)
View(battingIndividual)
battingIndividual <- Batting %>%
group_by(playerID) %>%
summarise_all(funs(mean))
View(battingIndividual)
battingIndividual <- Batting %>%
group_by(playerID) %>%
summarise_all(funs(mean))
View(battingIndividual)
View(battingIndividual)
View(battingIndividual)
View(battingIndividual)
warning()
comparison <- c(battingIndividual["ruthba01"])
comparison <- c(battingIndividual["playerID" == "ruthba01"])
View(comparison)
comparison <- c(battingIndividual[playerID == "ruthba01"])
comparison <- c(battingIndividual[battingIndividual$playerID == "ruthba01"])
target <- c("ruthba01", "willyte01", "troutmi01", "gehrilo01", "cobbty01")
comparison <- filter(dat, name %in% target)
comparison <- filter(battingIndividual, playerID %in% target)
View(comparison)
target <- c("ruthba01", "willite01", "troutmi01", "gehrilo01", "cobbty01")
filter(dat, name %in% target)
comparison <- filter(battingIndividual, playerID %in% target)
target <- c("ruthba01", "willite01", "troutmi01", "gehrilo01", "cobbty01")
comparison <- filter(battingIndividual, playerID %in% target)
View(comparison)
library(nbastatR)
pla <- players_careers(players = c("Stephen Curry"))
teams <- all_nba_teams()
View(teams)
warnings()
mostAllNBA <- teams %>%
group_by(namePlayer) %>%
summarize(number = n())
library(tidyverse)
mostAllNBA <- teams %>%
group_by(namePlayer) %>%
summarize(number = n())
ask_nba_api_nlp_question(question = "BROOKLYN NETS WINS ALL TIME",
return_similar_questions = T)
rosters <- teams_rosters(seasons = 1990:2018, nest_data = F, return_message = T)
rosters <- teams_rosters(seasons = 2018:2018, nest_data = F, return_message = T)
warnings()
View(rosters)
win_probability(game_ids = c(21700002, 21700003), nest_data = FALSE,
filter_non_plays = FALSE, return_message = TRUE)
win <- win_probability(game_ids = c(21700002, 21700003), nest_data = FALSE,
filter_non_plays = FALSE, return_message = TRUE)
View(win)
View(dataPlayerSeasonRankingsRegularSeason)
View(dataPlayerCareerTotalsRegularSeason)
library(nbastatR)
win <- win_probability(game_ids = c(21700002, 21700003), nest_data = FALSE,
filter_non_plays = FALSE, return_message = TRUE)
View(df_nba_team_dict)
game <- play_by_play(game_ids = 21700002, nest_data = FALSE,
return_message = TRUE)
View(game)
library(nbastatR)
warnings()
player_stats <- bref_players_stats(seasons = 2019, tables = c("advanced", "totals"), widen = TRUE, assign_to_environment = TRUE)
warnings()
View(player_stats)
wilt <- bref_bios("Wilt")
View(wilt)
wilt <- flatten(bref_bios("Wilt Chamberlain"))
View(wilt)
wilt <- flatten(bref_bios("Nikola"))
View(wilt)
wilt <- bref_bios("Nikola")
View(wilt)
View(wilt[[6]][[3]])
View(wilt[[6]][[16]])
library(nbastatR)
get_day_nba_games("02/11/2016")
library(nbastatR)
franchise_leaders(teams = "Brooklyn Nets", modes = c("Totals"))
franchise_leaders(teams = "Brooklyn Nets", modes = c("Totals"))
totals <- franchise_leaders(teams = "Brooklyn Nets", modes = c("Totals"))
View(totals)
stands <- standings(seasons = 2015:2018, season_types = "Regular Season", resolve_records = T, nest_data = F, return_message = T)
View(stands)
##Dataset Kaggle
load("C:\Users\usuario\Desktop\PRIMERO\Cognitive Systems\dataProcesses2019\data\nba-players-stats\Seasons_Stats.csv")
##Dataset Kaggle
load("C:/Users/usuario/Desktop/PRIMERO/Cognitive Systems/dataProcesses2019/data/nba-players-stats/Seasons_Stats.csv")
##Dataset Kaggle
Seasons_stats <- read.csv(file="C:/Users/usuario/Desktop/PRIMERO/Cognitive Systems/dataProcesses2019/data/nba-players-stats/Seasons_Stats.csv", header=TRUE, sep=",")
View(Seasons_stats)
Players <- read.csv(file="C:/Users/usuario/Desktop/PRIMERO/Cognitive Systems/dataProcesses2019/data/nba-players-stats/Players.csv", header=TRUE, sep=",")
player_data <- read.csv(file="C:/Users/usuario/Desktop/PRIMERO/Cognitive Systems/dataProcesses2019/data/nba-players-stats/player_data.csv.csv", header=TRUE, sep=",")
player_data <- read.csv(file="C:/Users/usuario/Desktop/PRIMERO/Cognitive Systems/dataProcesses2019/data/nba-players-stats/player_data.csv", header=TRUE, sep=",")
View(player_data)
View(Players)
View(Seasons_stats)
Seasons_stats %>%
filter(Player == "Hakeem Olajuwon")
Seasons_stats <- as.data.frame(Seasons_stats)
Players <- as.data.frame(Players)
player_data <- as.data.frame(player_data)
Seasons_stats %>%
filter(Player == "Hakeem Olajuwon")
library(tidyverse)
##Dataset Kaggle
Seasons_stats <- read.csv(file="C:/Users/usuario/Desktop/PRIMERO/Cognitive Systems/dataProcesses2019/data/nba-players-stats/Seasons_Stats.csv", header=TRUE, sep=",")
Players <- read.csv(file="C:/Users/usuario/Desktop/PRIMERO/Cognitive Systems/dataProcesses2019/data/nba-players-stats/Players.csv", header=TRUE, sep=",")
player_data <- read.csv(file="C:/Users/usuario/Desktop/PRIMERO/Cognitive Systems/dataProcesses2019/data/nba-players-stats/player_data.csv", header=TRUE, sep=",")
Seasons_stats %>%
filter(Player == "Hakeem Olajuwon")
Seasons_stats %>%
filter(Player == "Michael Jordan")
Seasons_stats %>%
filter(Player != "Michael Jordan")
Seasons_stats %>%
filter(Player == "Michael Jordan*")
MJ <- Seasons_stats %>%
filter(Player == "Michael Jordan*")
View(MJ)
Wilt <- Seasons_stats %>%
filter(Player == "Wilt Chamberlain*")
View(Wilt)
Wilt <- Seasons_stats %>%
filter(Player LIKE "Wilt Chamberlain*")
Wilt <- Seasons_stats %>%
filter(Player == "Wilt Chamberlain*" OR Player == "Wilt Chamberlain")
Wilt <- Seasons_stats %>%
filter(Player == "Wilt Chamberlain*" || Player == "Wilt Chamberlain")
View(Wilt)
Wilt <- Seasons_stats %>%
filter((Player == "Wilt Chamberlain*") || (Player == "Wilt Chamberlain"))
Wilt <- Seasons_stats %>%
filter((Player == "Wilt Chamberlain*") || (Player == "Michael Jordan*"))
Wilt <- Seasons_stats %>%
filter((Player == "Wilt Chamberlain*") || TRUE)
Wilt <- Seasons_stats %>%
filter((Player == "Wilt Chamberlain*") | (Player == "Michael Jordan*"))
View(Wilt)
Wilt <- Seasons_stats %>%
filter((Player == "Wilt Chamberlain*") | (Player == "Wilt Chamberlain"))
View(Wilt)
library(nbastatR)
totals <- franchise_leaders(teams = "Brooklyn Nets", modes = c("Totals"))
View(totals)
View(df_dict_nba_teams_history)
View(totals)
setwd("C:/Users/usuario/Desktop/PRIMERO/Cognitive Systems/dataProcesses2019/Final Project")
library(dplyr)
library(nbastatR)
library(ggplot2)
library(arm)
library(stringr)
library(gridExtra)
library(formattable)
library(corrplot)
library(plotly)
library(tidyr)
library(Hmisc)
library(car)
library(lmtest)
library(tseries)
library(tibble)
library(caret)
# Initial visualization
nbaFinal <- as.data.frame(read.csv("./data/nbaFinal.csv", stringsAsFactors = FALSE, header = TRUE))
# Graph1
nbaFinal %>%
select(Points, Rebounds, Assists, Blocks, Steals, Turnovers, FieldGoalPercentage, Minutes, Fouls) %>%
hist()
# Graph2
ggplot(data = nbaFinal, mapping = aes(x = FieldGoalPercentage, y = Points)) +
geom_point(alpha = 1, aes(color = Minutes)) +
ggtitle("Plot of Points by FieldGoalPercentage, colored by Minutes")
nbaFinal$isAllNBA <- factor(nbaFinal$isAllNBA)
trainIndex <- createDataPartition(nbaFinal$isAllNBA,
p = .95,
list = FALSE,
times = 1)
training_set <- nbaFinal[ trainIndex, ]
test_set <- nbaFinal[ -trainIndex, ]
fitControl <- trainControl(
method = "cv",
number = 10,
savePredictions = TRUE
)
grid <- expand.grid(k = 1:20)
fit_prediction <- train(
isAllNBA ~ Points + Rebounds + Assists + Blocks + Steals + Minutes,
data = training_set,
method = "knn",
trControl = fitControl,
tuneGrid = grid,
preProcess = "range"
)
# Make predictions on the test set
fit_cv_grid_pp_preds <- predict(fit_prediction, test_set)
# Assess performance via a confusion matrix
confusionMatrix(test_set$isAllNBA, fit_cv_grid_pp_preds)
trainIndex <- createDataPartition(nbaFinal$isAllNBA,
p = .8,
list = FALSE,
times = 1)
training_set <- nbaFinal[ trainIndex, ]
test_set <- nbaFinal[ -trainIndex, ]
fitControl <- trainControl(
method = "cv",
number = 10,
savePredictions = TRUE
)
grid <- expand.grid(k = 1:20)
fit_prediction <- train(
isAllNBA ~ Points + Rebounds + Assists + Blocks + Steals + Minutes,
data = training_set,
method = "knn",
trControl = fitControl,
tuneGrid = grid,
preProcess = "range"
)
# Make predictions on the test set
fit_cv_grid_pp_preds <- predict(fit_prediction, test_set)
# Assess performance via a confusion matrix
confusionMatrix(test_set$isAllNBA, fit_cv_grid_pp_preds)
# Prediction
set.seed(6)
nbaFinal$isAllNBA <- factor(nbaFinal$isAllNBA)
trainIndex <- createDataPartition(nbaFinal$isAllNBA,
p = .8,
list = FALSE,
times = 1)
training_set <- nbaFinal[ trainIndex, ]
test_set <- nbaFinal[ -trainIndex, ]
fitControl <- trainControl(
method = "cv",
number = 10,
savePredictions = TRUE
)
grid <- expand.grid(k = 1:20)
fit_prediction <- train(
isAllNBA ~ Points + Rebounds + Assists + Blocks + Steals + Minutes,
data = training_set,
method = "knn",
trControl = fitControl,
tuneGrid = grid,
preProcess = "range"
)
# Make predictions on the test set
fit_cv_grid_pp_preds <- predict(fit_prediction, test_set)
# Assess performance via a confusion matrix
confusionMatrix(test_set$isAllNBA, fit_cv_grid_pp_preds)
# Prediction
set.seed(1)
nbaFinal$isAllNBA <- factor(nbaFinal$isAllNBA)
trainIndex <- createDataPartition(nbaFinal$isAllNBA,
p = .8,
list = FALSE,
times = 1)
training_set <- nbaFinal[ trainIndex, ]
test_set <- nbaFinal[ -trainIndex, ]
fitControl <- trainControl(
method = "cv",
number = 10,
savePredictions = TRUE
)
grid <- expand.grid(k = 1:20)
fit_prediction <- train(
isAllNBA ~ Points + Rebounds + Assists + Blocks + Steals + Minutes,
data = training_set,
method = "knn",
trControl = fitControl,
tuneGrid = grid,
preProcess = "range"
)
# Make predictions on the test set
fit_cv_grid_pp_preds <- predict(fit_prediction, test_set)
# Assess performance via a confusion matrix
confusionMatrix(test_set$isAllNBA, fit_cv_grid_pp_preds)
# Make predictions on the test set
fit_cv_grid_pp_preds <- predict(fit_prediction, c(1,1,1,1,1,1))#test_set)
# Make predictions on the test set
fit_cv_grid_pp_preds <- predict(fit_prediction, c(Points= 1,1,1,1,1,1))#test_set)
# Make predictions on the test set
fit_cv_grid_pp_preds <- predict(fit_prediction, nbaFinal[1])#test_set)
nbaFinal[1]
nbaFinal[1,]
# Make predictions on the test set
fit_cv_grid_pp_preds <- predict(fit_prediction, nbaFinal[1,])#test_set)
# Assess performance via a confusion matrix
confusionMatrix(test_set$isAllNBA, fit_cv_grid_pp_preds)
fit_cv_grid_pp_preds
fit_cv_grid_pp_preds == nbaFinal[1,1]
nbaFinal[1,1]
nbaFinal[1,2]
nbaFinal[1,]
# Make predictions on the test set
fit_cv_grid_pp_preds <- predict(fit_prediction, nbaFinal[1,])#test_set)
fit_cv_grid_pp_preds == nbaFinal[1,2]
# Make predictions on the test set
fit_cv_grid_pp_preds <- predict(fit_prediction, nbaFinal[100,])#test_set)
fit_cv_grid_pp_preds == nbaFinal[100,2]
# Make predictions on the test set
fit_cv_grid_pp_preds <- predict(fit_prediction, nbaFinal[10763,])#test_set)
fit_cv_grid_pp_preds == nbaFinal[10763,2]
fit_cv_grid_pp_preds
# Make predictions on the test set
fit_cv_grid_pp_preds <- predict(fit_prediction, nbaFinal[10765,])#test_set)
fit_cv_grid_pp_preds == nbaFinal[10765,2]
# Decision tree
tree <- rpart(isAllNBA ~ Points + Rebounds + Assists + Blocks + Steals + Minutes, data=isAllNBA, cp=.02)
# Decision tree
library(rpart)
tree <- rpart(isAllNBA ~ Points + Rebounds + Assists + Blocks + Steals + Minutes, data=isAllNBA, cp=.02)
# Initial visualization
nbaFinal <- as.data.frame(read.csv("./data/nbaFinal.csv", stringsAsFactors = FALSE, header = TRUE))
tree <- rpart(isAllNBA ~ Points + Rebounds + Assists + Blocks + Steals + Minutes, data=isAllNBA, cp=.02)
tree <- rpart(isAllNBA ~ Points + Rebounds + Assists + Blocks + Steals + Minutes, data=nbaFinal, cp=.02)
# Visualize the decision tree with rpart.plot
rpart.plot(tree, box.palette="RdBu", shadow.col="gray", nn=TRUE)
# Decision tree
library(rpart.plot)
library("rpart.plot")
detach("package:rpart", unload = TRUE)
library(rpart, lib.loc = "C:/Program Files/R/R-3.6.1/library")
tree <- rpart(isAllNBA ~ Points + Rebounds + Assists + Blocks + Steals + Minutes, data=nbaFinal, cp=.02)
# Visualize the decision tree with rpart.plot
rpart.plot(tree, box.palette="RdBu", shadow.col="gray", nn=TRUE)
install.packages("rpart.plot")
library(rpart.plot)
tree <- rpart(isAllNBA ~ Points + Rebounds + Assists + Blocks + Steals + Minutes, data=nbaFinal, cp=.02)
# Visualize the decision tree with rpart.plot
rpart.plot(tree, box.palette="RdBu", shadow.col="gray", nn=TRUE)
# Visualize the decision tree with rpart.plot
rpart.plot(tree, type = 3, box.palette="RdBu", shadow.col="gray", nn=TRUE)
# Visualize the decision tree with rpart.plot
rpart.plot(tree, type = 2, box.palette="RdBu", shadow.col="gray", nn=TRUE)
# Visualize the decision tree with rpart.plot
rpart.plot(tree, type = 1, box.palette="RdBu", shadow.col="gray", nn=TRUE)
# Visualize the decision tree with rpart.plot
rpart.plot(tree, box.palette="RdBu", shadow.col="gray", nn=TRUE)
# Visualize the decision tree with rpart.plot
rpart.plot(tree, box.palette="RdBu", shadow.col="gray", nn=FALSE)
# Visualize the decision tree with rpart.plot
rpart.plot(tree, box.palette="RdBu", shadow.col="gray", nn=TRUE)
tree <- rpart(isAllNBA ~ ., cp=.02)
tree <- rpart(isAllNBA ~ ., data=nbaFinal, cp=.02)
# Visualize the decision tree with rpart.plot
rpart.plot(tree, box.palette="RdBu", shadow.col="gray", nn=TRUE)
tree <- rpart(isAllNBA ~ Points + Rebounds + Assists + Blocks + Steals + Minutes, data=nbaFinal, cp=.02)
# Visualize the decision trees
rpart.plot(tree, box.palette="RdBu", shadow.col="gray", nn=TRUE)
tree <- rpart(isAllNBA ~ Points + Rebounds + Assists + Blocks + Steals + Minutes + Year, data=nbaFinal, cp=.02)
# Visualize the decision trees
rpart.plot(tree, box.palette="RdBu", shadow.col="gray", nn=TRUE)
# Visualize the decision trees
rpart.plot(tree, type = 5, box.palette="RdBu", shadow.col="gray", nn=TRUE)
# Visualize the decision trees
rpart.plot(tree, type = 4, box.palette="RdBu", shadow.col="gray", nn=TRUE)
# Visualize the decision trees
rpart.plot(tree, type = 3, box.palette="RdBu", shadow.col="gray", nn=TRUE)
# Visualize the decision trees
rpart.plot(tree, type = 0, box.palette="RdBu", shadow.col="gray", nn=TRUE)
# Visualize the decision trees
rpart.plot(tree, box.palette="RdBu", shadow.col="gray", nn=TRUE)
tree <- rpart(isAllNBA ~ Points + Rebounds + Assists + Blocks + Steals + Minutes, data=nbaFinal, cp=.01)
# Visualize the decision trees
rpart.plot(tree, box.palette="RdBu", shadow.col="gray", nn=TRUE)
tree <- rpart(isAllNBA ~ Points + Rebounds + Assists + Blocks + Steals + Minutes, data=nbaFinal, cp=.001) #cp: complexity degree
# Visualize the decision trees
rpart.plot(tree, box.palette="RdBu", shadow.col="gray", nn=TRUE)
tree <- rpart(isAllNBA ~ Points + Rebounds + Assists + Blocks + Steals + Minutes, data=nbaFinal, cp=.01) #cp: complexity degree
# Visualize the decision trees
rpart.plot(tree, box.palette="RdBu", shadow.col="gray", nn=TRUE)
tree <- rpart(isAllNBA ~ Points + Rebounds + Assists + Blocks + Steals + Minutes, data=nbaFinal, cp=.02) #cp: complexity degree
# Visualize the decision trees
rpart.plot(tree, box.palette="RdBu", shadow.col="gray", nn=TRUE)
