mutate(ba400 = BA >= 0.400) %>%
select(playerID, yearID, nameLast,
nameFirst, BA, ba400)
View(topHitters)
# Sub-data frame for the .400 hitters plus the outliers after 1950
# (averages above .380) - used to produce labels in the plot below
bignames <- topHitters %>%
filter(ba400 | (yearID > 1950 & BA > 0.380)) %>%
arrange(desc(BA))
View(bignames)
# Variable to provide a vertical offset to certain
# labels in the ggplot below
bignames$yoffset <- c(0, 0, 0, 0, 0.002, 0, 0, 0,
0.001, -0.001, 0, -0.002, 0, 0,
0.002, 0, 0)
library(ggplot2)
# Produce the plot
ggplot(topHitters, aes(x = yearID, y = BA)) +
geom_point(aes(colour = ba400), size = 2.5) +
geom_hline(yintercept = 0.400, size = 1, colour = "gray70") +
geom_text(data = bignames, aes(y = BA + yoffset,
label = nameLast),
size = 3, hjust = 1.2) +
scale_colour_manual(values = c("FALSE" = "black", "TRUE" = "red")) +
xlim(1899, 2015) +
xlab("Year") +
scale_y_continuous("Batting average",
limits = c(0.330, 0.430),
breaks = seq(0.34, 0.42, by = 0.02),
labels = c(".340", ".360", ".380", ".400", ".420")) +
geom_smooth() +
theme(legend.position = "none")
##########################################################
# after Chris Green,
# http://sabr.org/research/baseball-s-first-power-surge-home-runs-late-19th-century-major-leagues
# Total home runs by year
totalHR <- Batting %>%
group_by(yearID) %>%
summarise(HomeRuns = sum(as.numeric(HR), na.rm=TRUE),
Games = sum(as.numeric(G), na.rm=TRUE))
View(totalHR)
# Plot HR by year, pre-1919 (dead ball era)
totalHR %>% filter(yearID <= 1918) %>%
ggplot(., aes(x = yearID, y = HomeRuns)) +
geom_line() +
geom_point() +
labs(x = "Year", y = "Home runs hit")
# Plot HR by year, pre-1919 (dead ball era)
totalHR %>% filter(yearID <= 1918) %>%
ggplot(., aes(x = yearID, y = Games)) +
geom_line() +
geom_point() +
labs(x = "Year", y = "Home runs hit")
# Plot HR by year, pre-1919 (dead ball era)
totalHR %>% filter(yearID <= 1918) %>%
ggplot(., aes(x = yearID, y = HomeRuns)) +
geom_line() +
geom_point() +
labs(x = "Year", y = "Home runs hit")
# Take games into account
totalHR %>% filter(yearID <= 1918) %>%
ggplot(., aes(x = yearID, y = HomeRuns/Games)) +
geom_line() +
geom_point() +
labs(x = "Year", y = "Home runs per game played")
# Widen perspective to all years from 1871
ggplot(totalHR, aes(x = yearID, y = HomeRuns)) +
geom_point() +
geom_path() +
geom_smooth() +
labs(x = "Year", y = "Home runs hit")
# Similar plot for HR per game played by year -
# shows several eras with spikes in HR hit
ggplot(totalHR, aes(x = yearID, y = HomeRuns/Games)) +
geom_point() +
geom_path() +
geom_smooth(se = FALSE) +
labs(x = "Year", y = "Home runs per game played")
data(Teams)
library("dplyr")
library("tidyr")
# Add some selected measures to the Teams data frame
# Restrict to AL and NL in modern era
teams <- Teams %>%
filter(yearID >= 1901 & lgID %in% c("AL", "NL")) %>%
group_by(yearID, teamID) %>%
mutate(TB = H + X2B + 2 * X3B + 3 * HR,
WinPct = W/G,
rpg = R/G,
hrpg = HR/G,
tbpg = TB/G,
kpg = SO/G,
k2bb = SO/BB,
whip = 3 * (H + BB)/IPouts)
View(teams)
# Function to create a ggplot by year for selected team stats
# Both arguments are character strings
yrPlot <- function(yvar, label)
{
require("ggplot2")
ggplot(teams, aes_string(x = "yearID", y = yvar)) +
geom_point(size = 0.5) +
geom_smooth(method="loess") +
labs(x = "Year", y = paste(label, "per game"))
}
## Run scoring in the modern era by year
yrPlot("rpg", "Runs")
## Home runs per game by year
yrPlot("hrpg", "Home runs")
## Total bases per game by year
yrPlot("tbpg", "Total bases")
## Strikeouts per game by year
yrPlot("kpg", "Strikeouts")
## Plot win percentage vs. run differential (R - RA)
ggplot(teams, aes(x = R - RA, y = WinPct)) +
geom_point(size = 0.5) +
geom_smooth(method="loess") +
geom_hline(yintercept = 0.5, color = "orange") +
geom_vline(xintercept = 0, color = "orange") +
labs(x = "Run differential", y = "Win percentage")
## Plot attendance vs. win percentage by league, post-1980
teams %>% filter(yearID >= 1980) %>%
ggplot(., aes(x = WinPct, y = attendance/1000)) +
geom_point(size = 0.5) +
geom_smooth(method="loess", se = FALSE) +
facet_wrap(~ lgID) +
labs(x = "Win percentage", y = "Attendance (1000s)")
## Teams with over 4 million attendance in a season
teams %>%
filter(attendance >= 4e6) %>%
select(yearID, lgID, teamID, Rank, attendance) %>%
arrange(desc(attendance))
## Average season HRs by park, post-1980
teams %>%
filter(yearID >= 1980) %>%
group_by(park) %>%
summarise(meanHRpg = mean((HR + HRA)/Ghome), nyears = n()) %>%
filter(nyears >= 10) %>%
arrange(desc(meanHRpg)) %>%
head(., 10)
## Home runs per game at Fenway Park and Wrigley Field,
## the two oldest MLB parks, by year. Fenway opened in 1912.
teams %>%
filter(yearID >= 1912 & teamID %in% c("BOS", "CHN")) %>%
mutate(hrpg = (HR + HRA)/Ghome) %>%
ggplot(., aes(x = yearID, y = hrpg, color = teamID)) +
geom_line(size = 1) +
geom_point() +
labs(x = "Year", y = "Home runs per game", color = "Team") +
scale_color_manual(values = c("red", "blue"))
## Ditto for total strikeouts per game
teams %>%
filter(yearID >= 1912 & teamID %in% c("BOS", "CHN")) %>%
mutate(kpg = (SO + SOA)/Ghome) %>%
ggplot(., aes(x = yearID, y = kpg, color = teamID)) +
geom_line(size = 1) +
geom_point() +
labs(x = "Year", y = "Strikeouts per game", color = "Team") +
scale_color_manual(values = c("red", "blue"))
library("jsonlite") # in each relevant script
library(httr)
yelp_key <- "-RQmiAwjGayf8-fpXOGWpZX00FdFXtV3Dz5gcecN5_wnFBihR9ddSg4vAjKguf04WriFS-MkC4Sjbq4A62kyynsejPs5WaizVv8TeYtNESl2TsGdRdGJ42WWjgSuXXYx"
uri <- "https://api.yelp.com/v3/businesses/search"
query_params <- list(
term = "restaurant",
categories = "pizza",
location = "Madrid",
sort_by = "rating",
radius = 1000 # measured in meters, as detailed in the documentation
)
# Make a GET request, including your API key as a header
response <- GET(
uri,
query = query_params,
add_headers(Authorization = paste("bearer", yelp_key))
)
# Parse results and isolate data of interest
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
# Inspect the response data
names(response_data) # [1] "businesses" "total" "region"
View(response_data$business)
View(response_data$total)
View(response_data$region)
# Inspect the response data
names(response_data) # [1] "businesses" "total" "region"
View(response_data$region)
View(response_data$businesses)
query_params <- list(
term = "restaurant",
categories = "Pizza",
location = "Madrid",
sort_by = "rating",
radius = 1000 # measured in meters, as detailed in the documentation
)
# Make a GET request, including your API key as a header
response <- GET(
uri,
query = query_params,
add_headers(Authorization = paste("bearer", yelp_key))
)
# Parse results and isolate data of interest
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
# Inspect the response data
names(response_data) # [1] "businesses" "total" "region"
View(response_data$businesses)
query_params <- list(
term = "restaurant",
categories = "pizza",
location = "Madrid",
sort_by = "rating",
radius = 1000 # measured in meters, as detailed in the documentation
)
# Make a GET request, including your API key as a header
response <- GET(
uri,
query = query_params,
add_headers(Authorization = paste("bearer", yelp_key))
)
# Parse results and isolate data of interest
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
# Inspect the response data
names(response_data) # [1] "businesses" "total" "region"
View(response_data$businesses)
query_params <- list(
term = "Pizza restaurant",
location = "Madrid",
sort_by = "rating",
radius = 1000 # measured in meters, as detailed in the documentation
)
# Make a GET request, including your API key as a header
response <- GET(
uri,
query = query_params,
add_headers(Authorization = paste("bearer", yelp_key))
)
# Parse results and isolate data of interest
response_text <- content(response, type = "text")
response_data <- fromJSON(response_text)
# Inspect the response data
names(response_data) # [1] "businesses" "total" "region"
View(response_data$businesses)
yelp_key <- "-RQmiAwjGayf8-fpXOGWpZX00FdFXtV3Dz5gcecN5_wnFBihR9ddSg4vAjKguf04WriFS-MkC4Sjbq4A62kyynsejPs5WaizVv8TeYtNESl2TsGdRdGJ42WWjgSuXXYx"
uri <- "https://api.yelp.com/v3/businesses/search"
query_params <- list(
term = "Pizza restaurant",
location = "Madrid",
sort_by = "rating",
radius = 1000 # measured in meters, as detailed in the documentation
)
# Make a GET request, including your API key as a header
response <- GET(
uri,
query = query_params,
add_headers(Authorization = paste("bearer", yelp_key))
)
View(response)
# Parse results and isolate data of interest
response_text <- content(response, type = "text")
response_text
# Inspect the response data
names(response_data) # [1] "businesses" "total" "region"
response_data <- fromJSON(response_text)
# Inspect the response data
names(response_data) # [1] "businesses" "total" "region"
View(response_data$businesses)
library(Lahman)
library(tidyverse)
library(ggplot2)
## Prelude: Extract information from Salaries and People
## to be merged with the batting data.
data(Batting)
## Prelude: Extract information from Salaries and People
## to be merged with the batting data.
data(Batting)
force(Batting)
View(Batting)
View(Batting)
battingIndividual <- batting %>%
group_by(playerID)
battingIndividual <- Batting %>%
group_by(playerID)
View(battingIndividual)
battingIndividual <- Batting %>%
group_by(playerID) %>%
summarise(meanHr = mean(HR))
View(battingIndividual)
battingIndividual <- Batting %>%
group_by(playerID) %>%
summarise()
View(battingIndividual)
battingIndividual <- Batting %>%
group_by(playerID) %>%
View(battingIndividual)
battingIndividual <- Batting %>%
group_by(playerID)
View(battingIndividual)
battingIndividual <- Batting %>%
group_by(playerID) %>%
summarise_all(funs(mean))
View(battingIndividual)
battingIndividual <- Batting %>%
group_by(playerID) %>%
summarise_all(funs(mean))
View(battingIndividual)
View(battingIndividual)
View(battingIndividual)
View(battingIndividual)
warning()
comparison <- c(battingIndividual["ruthba01"])
comparison <- c(battingIndividual["playerID" == "ruthba01"])
View(comparison)
comparison <- c(battingIndividual[playerID == "ruthba01"])
comparison <- c(battingIndividual[battingIndividual$playerID == "ruthba01"])
target <- c("ruthba01", "willyte01", "troutmi01", "gehrilo01", "cobbty01")
comparison <- filter(dat, name %in% target)
comparison <- filter(battingIndividual, playerID %in% target)
View(comparison)
target <- c("ruthba01", "willite01", "troutmi01", "gehrilo01", "cobbty01")
filter(dat, name %in% target)
comparison <- filter(battingIndividual, playerID %in% target)
target <- c("ruthba01", "willite01", "troutmi01", "gehrilo01", "cobbty01")
comparison <- filter(battingIndividual, playerID %in% target)
View(comparison)
library(nbastatR)
pla <- players_careers(players = c("Stephen Curry"))
teams <- all_nba_teams()
View(teams)
warnings()
mostAllNBA <- teams %>%
group_by(namePlayer) %>%
summarize(number = n())
library(tidyverse)
mostAllNBA <- teams %>%
group_by(namePlayer) %>%
summarize(number = n())
ask_nba_api_nlp_question(question = "BROOKLYN NETS WINS ALL TIME",
return_similar_questions = T)
rosters <- teams_rosters(seasons = 1990:2018, nest_data = F, return_message = T)
rosters <- teams_rosters(seasons = 2018:2018, nest_data = F, return_message = T)
warnings()
View(rosters)
win_probability(game_ids = c(21700002, 21700003), nest_data = FALSE,
filter_non_plays = FALSE, return_message = TRUE)
win <- win_probability(game_ids = c(21700002, 21700003), nest_data = FALSE,
filter_non_plays = FALSE, return_message = TRUE)
View(win)
View(dataPlayerSeasonRankingsRegularSeason)
View(dataPlayerCareerTotalsRegularSeason)
library(nbastatR)
win <- win_probability(game_ids = c(21700002, 21700003), nest_data = FALSE,
filter_non_plays = FALSE, return_message = TRUE)
View(df_nba_team_dict)
game <- play_by_play(game_ids = 21700002, nest_data = FALSE,
return_message = TRUE)
View(game)
library(nbastatR)
warnings()
player_stats <- bref_players_stats(seasons = 2019, tables = c("advanced", "totals"), widen = TRUE, assign_to_environment = TRUE)
warnings()
View(player_stats)
wilt <- bref_bios("Wilt")
View(wilt)
wilt <- flatten(bref_bios("Wilt Chamberlain"))
View(wilt)
wilt <- flatten(bref_bios("Nikola"))
View(wilt)
wilt <- bref_bios("Nikola")
View(wilt)
View(wilt[[6]][[3]])
View(wilt[[6]][[16]])
library(nbastatR)
get_day_nba_games("02/11/2016")
library(nbastatR)
franchise_leaders(teams = "Brooklyn Nets", modes = c("Totals"))
franchise_leaders(teams = "Brooklyn Nets", modes = c("Totals"))
totals <- franchise_leaders(teams = "Brooklyn Nets", modes = c("Totals"))
View(totals)
stands <- standings(seasons = 2015:2018, season_types = "Regular Season", resolve_records = T, nest_data = F, return_message = T)
View(stands)
##Dataset Kaggle
load("C:\Users\usuario\Desktop\PRIMERO\Cognitive Systems\dataProcesses2019\data\nba-players-stats\Seasons_Stats.csv")
##Dataset Kaggle
load("C:/Users/usuario/Desktop/PRIMERO/Cognitive Systems/dataProcesses2019/data/nba-players-stats/Seasons_Stats.csv")
##Dataset Kaggle
Seasons_stats <- read.csv(file="C:/Users/usuario/Desktop/PRIMERO/Cognitive Systems/dataProcesses2019/data/nba-players-stats/Seasons_Stats.csv", header=TRUE, sep=",")
View(Seasons_stats)
Players <- read.csv(file="C:/Users/usuario/Desktop/PRIMERO/Cognitive Systems/dataProcesses2019/data/nba-players-stats/Players.csv", header=TRUE, sep=",")
player_data <- read.csv(file="C:/Users/usuario/Desktop/PRIMERO/Cognitive Systems/dataProcesses2019/data/nba-players-stats/player_data.csv.csv", header=TRUE, sep=",")
player_data <- read.csv(file="C:/Users/usuario/Desktop/PRIMERO/Cognitive Systems/dataProcesses2019/data/nba-players-stats/player_data.csv", header=TRUE, sep=",")
View(player_data)
View(Players)
View(Seasons_stats)
Seasons_stats %>%
filter(Player == "Hakeem Olajuwon")
Seasons_stats <- as.data.frame(Seasons_stats)
Players <- as.data.frame(Players)
player_data <- as.data.frame(player_data)
Seasons_stats %>%
filter(Player == "Hakeem Olajuwon")
library(tidyverse)
##Dataset Kaggle
Seasons_stats <- read.csv(file="C:/Users/usuario/Desktop/PRIMERO/Cognitive Systems/dataProcesses2019/data/nba-players-stats/Seasons_Stats.csv", header=TRUE, sep=",")
Players <- read.csv(file="C:/Users/usuario/Desktop/PRIMERO/Cognitive Systems/dataProcesses2019/data/nba-players-stats/Players.csv", header=TRUE, sep=",")
player_data <- read.csv(file="C:/Users/usuario/Desktop/PRIMERO/Cognitive Systems/dataProcesses2019/data/nba-players-stats/player_data.csv", header=TRUE, sep=",")
Seasons_stats %>%
filter(Player == "Hakeem Olajuwon")
Seasons_stats %>%
filter(Player == "Michael Jordan")
Seasons_stats %>%
filter(Player != "Michael Jordan")
Seasons_stats %>%
filter(Player == "Michael Jordan*")
MJ <- Seasons_stats %>%
filter(Player == "Michael Jordan*")
View(MJ)
Wilt <- Seasons_stats %>%
filter(Player == "Wilt Chamberlain*")
View(Wilt)
Wilt <- Seasons_stats %>%
filter(Player LIKE "Wilt Chamberlain*")
Wilt <- Seasons_stats %>%
filter(Player == "Wilt Chamberlain*" OR Player == "Wilt Chamberlain")
Wilt <- Seasons_stats %>%
filter(Player == "Wilt Chamberlain*" || Player == "Wilt Chamberlain")
View(Wilt)
Wilt <- Seasons_stats %>%
filter((Player == "Wilt Chamberlain*") || (Player == "Wilt Chamberlain"))
Wilt <- Seasons_stats %>%
filter((Player == "Wilt Chamberlain*") || (Player == "Michael Jordan*"))
Wilt <- Seasons_stats %>%
filter((Player == "Wilt Chamberlain*") || TRUE)
Wilt <- Seasons_stats %>%
filter((Player == "Wilt Chamberlain*") | (Player == "Michael Jordan*"))
View(Wilt)
Wilt <- Seasons_stats %>%
filter((Player == "Wilt Chamberlain*") | (Player == "Wilt Chamberlain"))
View(Wilt)
library(nbastatR)
totals <- franchise_leaders(teams = "Brooklyn Nets", modes = c("Totals"))
View(totals)
View(df_dict_nba_teams_history)
View(totals)
setwd("C:/Users/usuario/Desktop/PRIMERO/Cognitive Systems/dataProcesses2019/Final Project")
setwd("C:/Users/usuario/Desktop/PRIMERO/Cognitive Systems/dataProcesses2019/Final Project")
setwd("C:/Users/usuario/Desktop/PRIMERO/Cognitive Systems/dataProcesses2019/Final Project")
library(dplyr)
library(ggplot2)
library(arm)
library(stringr)
library(gridExtra)
library(formattable)
library(corrplot)
library(plotly)
library(tidyr)
library(Hmisc)
library(car)
library(lmtest)
library(tseries)
library(tibble)
library(caret)
library(ggpubr)
nbaFinalLM = nbaFinal
nbaFinalLM$pointsCuant <- NA
nbaFinalLM$pointsCuant[nbaFinalLM$Points <= 10] <- "LOW"
nbaFinalLM$pointsCuant[ 10 < nbaFinalLM$Points & nbaFinalLM$Points <= 20] <- "MEDIUM"
nbaFinalLM$pointsCuant[nbaFinalLM$Points > 20] <- "HIGH"
nbaFinalLM$minutesCuant <- NA
nbaFinalLM$minutesCuant[nbaFinalLM$Minutes <= 15] <- "LOW"
nbaFinalLM$minutesCuant[ 15 < nbaFinalLM$Minutes & nbaFinalLM$Minutes <= 30] <- "MEDIUM"
nbaFinalLM$minutesCuant[nbaFinalLM$Minutes > 30] <- "HIGH"
nbaFinalLM$isAllNBACuant <- NA
nbaFinalLM$isAllNBACuant[nbaFinalLM$isAllNBA==T] <- 1
nbaFinalLM$isAllNBACuant[nbaFinalLM$isAllNBA==F] <- 0
model = lm(isAllNBA ~ Points + Rebounds + Assists + Steals + Blocks + Minutes, data=nbaFinalLM)
model = lm(Minutes ~ Points + Rebounds + Assists + Turnovers*-1 + Fouls*-1 + FieldGoalPercentage*pointsCuant , data = nbaFinalLM)
nbaFinalLM = nbaFinal
model = lm(isAllNBA ~ Points + Rebounds + Assists + Steals + Blocks + Minutes, data=nbaFinalLM)
nbaFinalLM$isAllNBACuant <- NA
nbaFinalLM$isAllNBACuant[nbaFinalLM$isAllNBA==T] <- 1
nbaFinalLM$isAllNBACuant[nbaFinalLM$isAllNBA==F] <- 0
model = lm(isAllNBACuant ~ Points + Rebounds + Assists + Steals + Blocks + Minutes, data=nbaFinalLM)
summary(model)
model = lm(isAllNBACuant ~ pointsCuant + Rebounds + Assists + Steals + Blocks + Minutes, data=nbaFinalLM)
nbaFinalLM = nbaFinal
nbaFinalLM$pointsCuant <- NA
nbaFinalLM$pointsCuant[nbaFinalLM$Points <= 10] <- "LOW"
nbaFinalLM$pointsCuant[ 10 < nbaFinalLM$Points & nbaFinalLM$Points <= 20] <- "MEDIUM"
nbaFinalLM$pointsCuant[nbaFinalLM$Points > 20] <- "HIGH"
nbaFinalLM$minutesCuant <- NA
nbaFinalLM$minutesCuant[nbaFinalLM$Minutes <= 15] <- "LOW"
nbaFinalLM$minutesCuant[ 15 < nbaFinalLM$Minutes & nbaFinalLM$Minutes <= 30] <- "MEDIUM"
nbaFinalLM$minutesCuant[nbaFinalLM$Minutes > 30] <- "HIGH"
nbaFinalLM$isAllNBACuant <- NA
nbaFinalLM$isAllNBACuant[nbaFinalLM$isAllNBA==T] <- 1
nbaFinalLM$isAllNBACuant[nbaFinalLM$isAllNBA==F] <- 0
model = lm(isAllNBACuant ~ pointsCuant + Rebounds + Assists + Steals + Blocks + Minutes, data=nbaFinalLM)
plot(model)
summary(model)
model = lm(isAllNBACuant ~ pointsCuant + Rebounds + Assists + Steals + Blocks + minutesCuant, data=nbaFinalLM)
summary(model)
model = lm(isAllNBACuant ~ pointsCuant + Rebounds + Assists + Steals + Blocks + Minutes, data=nbaFinalLM)
summary(model)
model = lm(isAllNBACuant ~ pointsCuant + Rebounds + Assists + Steals  + Minutes, data=nbaFinalLM)
summary(model)
model = lm(isAllNBACuant ~ pointsCuant + Rebounds + Assists + Steals + Blocks + Minutes + FieldGoalPercentage, data=nbaFinalLM)
summary(model)
model = lm(isAllNBACuant ~ pointsCuant + Rebounds + Assists + Steals + Blocks + Minutes, data=nbaFinalLM)
summary(model)
plot(model)
